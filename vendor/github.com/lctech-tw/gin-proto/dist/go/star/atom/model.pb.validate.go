// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: star/atom/model.proto

package atom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MemberInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MemberInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for DisplayName

	// no validation rules for AvatarUrl

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Role

	// no validation rules for Status

	for idx, item := range m.GetFollowers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberInfoValidationError{
					field:  fmt.Sprintf("Followers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MemberInfoValidationError is the validation error returned by
// MemberInfo.Validate if the designated constraints aren't met.
type MemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberInfoValidationError) ErrorName() string { return "MemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e MemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberInfoValidationError{}

// Validate checks the field values on ProfitRatioInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProfitRatioInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StaffObjectId

	// no validation rules for Ratio

	// no validation rules for TotalRatio

	return nil
}

// ProfitRatioInfoValidationError is the validation error returned by
// ProfitRatioInfo.Validate if the designated constraints aren't met.
type ProfitRatioInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfitRatioInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfitRatioInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfitRatioInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfitRatioInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfitRatioInfoValidationError) ErrorName() string { return "ProfitRatioInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProfitRatioInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfitRatioInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfitRatioInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfitRatioInfoValidationError{}

// Validate checks the field values on StarDetail with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarDetail) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarDetailValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrivateData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarDetailValidationError{
				field:  "PrivateData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStaffInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarDetailValidationError{
				field:  "StaffInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// StarDetailValidationError is the validation error returned by
// StarDetail.Validate if the designated constraints aren't met.
type StarDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarDetailValidationError) ErrorName() string { return "StarDetailValidationError" }

// Error satisfies the builtin error interface
func (e StarDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarDetailValidationError{}

// Validate checks the field values on GCSData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GCSData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PublicUrl

	// no validation rules for GcsPath

	return nil
}

// GCSDataValidationError is the validation error returned by GCSData.Validate
// if the designated constraints aren't met.
type GCSDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSDataValidationError) ErrorName() string { return "GCSDataValidationError" }

// Error satisfies the builtin error interface
func (e GCSDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSDataValidationError{}

// Validate checks the field values on ModelCardInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ModelCardInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCard_1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCardInfoValidationError{
				field:  "Card_1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCard_2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCardInfoValidationError{
				field:  "Card_2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCard_3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCardInfoValidationError{
				field:  "Card_3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCard_4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCardInfoValidationError{
				field:  "Card_4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ModelCardInfoValidationError is the validation error returned by
// ModelCardInfo.Validate if the designated constraints aren't met.
type ModelCardInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelCardInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelCardInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelCardInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelCardInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelCardInfoValidationError) ErrorName() string { return "ModelCardInfoValidationError" }

// Error satisfies the builtin error interface
func (e ModelCardInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelCardInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelCardInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelCardInfoValidationError{}

// Validate checks the field values on IdCardInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdCardInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFront()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdCardInfoValidationError{
				field:  "Front",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdCardInfoValidationError{
				field:  "Back",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IdCardInfoValidationError is the validation error returned by
// IdCardInfo.Validate if the designated constraints aren't met.
type IdCardInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdCardInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdCardInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdCardInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdCardInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdCardInfoValidationError) ErrorName() string { return "IdCardInfoValidationError" }

// Error satisfies the builtin error interface
func (e IdCardInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdCardInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdCardInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdCardInfoValidationError{}

// Validate checks the field values on StarIntro with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarIntro) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MyType

	// no validation rules for HashTag

	return nil
}

// StarIntroValidationError is the validation error returned by
// StarIntro.Validate if the designated constraints aren't met.
type StarIntroValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarIntroValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarIntroValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarIntroValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarIntroValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarIntroValidationError) ErrorName() string { return "StarIntroValidationError" }

// Error satisfies the builtin error interface
func (e StarIntroValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarIntro.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarIntroValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarIntroValidationError{}

// Validate checks the field values on StarText with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarText) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for StageName

	// no validation rules for RealName

	// no validation rules for Address

	if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarTextValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BloodType

	// no validation rules for Bust

	// no validation rules for Waist

	// no validation rules for Hips

	// no validation rules for Height

	// no validation rules for Weight

	// no validation rules for Line

	if v, ok := interface{}(m.GetLadyIntro()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarTextValidationError{
				field:  "LadyIntro",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jvid

	// no validation rules for Marriage

	// no validation rules for Occupation

	// no validation rules for Education

	// no validation rules for EarPierce

	// no validation rules for Tattoo

	// no validation rules for ShoeSize

	// no validation rules for PhotoBoundary

	// no validation rules for VideoBoundary

	return nil
}

// StarTextValidationError is the validation error returned by
// StarText.Validate if the designated constraints aren't met.
type StarTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarTextValidationError) ErrorName() string { return "StarTextValidationError" }

// Error satisfies the builtin error interface
func (e StarTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarTextValidationError{}

// Validate checks the field values on StarImage with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarImage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarImageValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModelCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarImageValidationError{
				field:  "ModelCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarImageValidationError{
				field:  "Banner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StarImageValidationError is the validation error returned by
// StarImage.Validate if the designated constraints aren't met.
type StarImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarImageValidationError) ErrorName() string { return "StarImageValidationError" }

// Error satisfies the builtin error interface
func (e StarImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarImageValidationError{}

// Validate checks the field values on StarRecord with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarRecord) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Q1

	// no validation rules for Q2

	// no validation rules for Q3

	// no validation rules for Q4

	// no validation rules for Q5

	// no validation rules for Q6

	// no validation rules for Q7

	// no validation rules for Q8

	// no validation rules for Q9

	// no validation rules for Q10

	return nil
}

// StarRecordValidationError is the validation error returned by
// StarRecord.Validate if the designated constraints aren't met.
type StarRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarRecordValidationError) ErrorName() string { return "StarRecordValidationError" }

// Error satisfies the builtin error interface
func (e StarRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarRecordValidationError{}

// Validate checks the field values on StarProfileData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StarProfileData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTextMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarProfileDataValidationError{
				field:  "TextMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImageMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarProfileDataValidationError{
				field:  "ImageMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRecordMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarProfileDataValidationError{
				field:  "RecordMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RegisterStatus

	// no validation rules for Memo

	// no validation rules for Category

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarProfileDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarProfileDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StarProfileDataValidationError is the validation error returned by
// StarProfileData.Validate if the designated constraints aren't met.
type StarProfileDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarProfileDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarProfileDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarProfileDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarProfileDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarProfileDataValidationError) ErrorName() string { return "StarProfileDataValidationError" }

// Error satisfies the builtin error interface
func (e StarProfileDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarProfileData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarProfileDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarProfileDataValidationError{}

// Validate checks the field values on StarPrivateData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StarPrivateData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdentityCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarPrivateDataValidationError{
				field:  "IdentityCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarPrivateDataValidationError{
				field:  "BankAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StarPrivateDataValidationError is the validation error returned by
// StarPrivateData.Validate if the designated constraints aren't met.
type StarPrivateDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarPrivateDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarPrivateDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarPrivateDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarPrivateDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarPrivateDataValidationError) ErrorName() string { return "StarPrivateDataValidationError" }

// Error satisfies the builtin error interface
func (e StarPrivateDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarPrivateData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarPrivateDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarPrivateDataValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Category) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Sort

	return nil
}

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Tag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on RegisterData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegisterId

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for DisplayName

	// no validation rules for AvatarUrl

	return nil
}

// RegisterDataValidationError is the validation error returned by
// RegisterData.Validate if the designated constraints aren't met.
type RegisterDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDataValidationError) ErrorName() string { return "RegisterDataValidationError" }

// Error satisfies the builtin error interface
func (e RegisterDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDataValidationError{}

// Validate checks the field values on RegisterDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegisterId

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterDetailValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrivateData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterDetailValidationError{
				field:  "PrivateData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStaffInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterDetailValidationError{
				field:  "StaffInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegisterDetailValidationError is the validation error returned by
// RegisterDetail.Validate if the designated constraints aren't met.
type RegisterDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDetailValidationError) ErrorName() string { return "RegisterDetailValidationError" }

// Error satisfies the builtin error interface
func (e RegisterDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDetailValidationError{}

// Validate checks the field values on RevenueData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RevenueData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for DisplayName

	// no validation rules for AvatarUrl

	// no validation rules for Sum

	// no validation rules for Ratio

	return nil
}

// RevenueDataValidationError is the validation error returned by
// RevenueData.Validate if the designated constraints aren't met.
type RevenueDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevenueDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevenueDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevenueDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevenueDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevenueDataValidationError) ErrorName() string { return "RevenueDataValidationError" }

// Error satisfies the builtin error interface
func (e RevenueDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevenueData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevenueDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevenueDataValidationError{}
