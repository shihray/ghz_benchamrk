// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: star/direct/direct.proto

package direct

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	atom "github.com/lctech-tw/gin-proto/dist/go/star/atom"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = atom.BloodType(0)

	_ = atom.StarRole(0)

	_ = atom.StarRole(0)

	_ = atom.StarStatus(0)

	_ = atom.Device(0)

	_ = atom.Device(0)
)

// define the regex for a UUID once up-front
var _direct_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for DisplayName

	// no validation rules for CoverUrl

	// no validation rules for AvatarUrl

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Information with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Information) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	// no validation rules for Weight

	// no validation rules for BloodType

	if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InformationValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Bust

	// no validation rules for Waist

	// no validation rules for Hips

	// no validation rules for MyType

	return nil
}

// InformationValidationError is the validation error returned by
// Information.Validate if the designated constraints aren't met.
type InformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InformationValidationError) ErrorName() string { return "InformationValidationError" }

// Error satisfies the builtin error interface
func (e InformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InformationValidationError{}

// Validate checks the field values on SocialMedia with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SocialMedia) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Jvid

	return nil
}

// SocialMediaValidationError is the validation error returned by
// SocialMedia.Validate if the designated constraints aren't met.
type SocialMediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocialMediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocialMediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocialMediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocialMediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocialMediaValidationError) ErrorName() string { return "SocialMediaValidationError" }

// Error satisfies the builtin error interface
func (e SocialMediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocialMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocialMediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocialMediaValidationError{}

// Validate checks the field values on StarInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StarInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for Tag

	// no validation rules for Category

	// no validation rules for DisplayName

	// no validation rules for AvatarUrl

	// no validation rules for CoverUrl

	if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarInfoValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSocialMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarInfoValidationError{
				field:  "SocialMedia",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImageData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarInfoValidationError{
				field:  "ImageData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	// no validation rules for Status

	return nil
}

// StarInfoValidationError is the validation error returned by
// StarInfo.Validate if the designated constraints aren't met.
type StarInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarInfoValidationError) ErrorName() string { return "StarInfoValidationError" }

// Error satisfies the builtin error interface
func (e StarInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarInfoValidationError{}

// Validate checks the field values on StarProfileListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StarProfileListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Tag

	// no validation rules for Category

	// no validation rules for Role

	// no validation rules for DisplayName

	// no validation rules for Status

	// no validation rules for Device

	return nil
}

// StarProfileListReqValidationError is the validation error returned by
// StarProfileListReq.Validate if the designated constraints aren't met.
type StarProfileListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarProfileListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarProfileListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarProfileListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarProfileListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarProfileListReqValidationError) ErrorName() string {
	return "StarProfileListReqValidationError"
}

// Error satisfies the builtin error interface
func (e StarProfileListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarProfileListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarProfileListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarProfileListReqValidationError{}

// Validate checks the field values on StarProfileListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StarProfileListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StarProfileListResValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// StarProfileListResValidationError is the validation error returned by
// StarProfileListRes.Validate if the designated constraints aren't met.
type StarProfileListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarProfileListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarProfileListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarProfileListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarProfileListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarProfileListResValidationError) ErrorName() string {
	return "StarProfileListResValidationError"
}

// Error satisfies the builtin error interface
func (e StarProfileListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarProfileListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarProfileListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarProfileListResValidationError{}

// Validate checks the field values on StarListReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StarListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Uid

	// no validation rules for ObjectId

	// no validation rules for Tag

	// no validation rules for Category

	// no validation rules for DisplayName

	// no validation rules for Device

	// no validation rules for Page

	// no validation rules for Limit

	return nil
}

// StarListReqValidationError is the validation error returned by
// StarListReq.Validate if the designated constraints aren't met.
type StarListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarListReqValidationError) ErrorName() string { return "StarListReqValidationError" }

// Error satisfies the builtin error interface
func (e StarListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarListReqValidationError{}

// Validate checks the field values on StarListRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StarListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StarListResValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// StarListResValidationError is the validation error returned by
// StarListRes.Validate if the designated constraints aren't met.
type StarListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarListResValidationError) ErrorName() string { return "StarListResValidationError" }

// Error satisfies the builtin error interface
func (e StarListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarListResValidationError{}

// Validate checks the field values on TagListReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TagListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// TagListReqValidationError is the validation error returned by
// TagListReq.Validate if the designated constraints aren't met.
type TagListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagListReqValidationError) ErrorName() string { return "TagListReqValidationError" }

// Error satisfies the builtin error interface
func (e TagListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagListReqValidationError{}

// Validate checks the field values on TagListRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TagListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagListResValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TagListResValidationError is the validation error returned by
// TagListRes.Validate if the designated constraints aren't met.
type TagListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagListResValidationError) ErrorName() string { return "TagListResValidationError" }

// Error satisfies the builtin error interface
func (e TagListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagListResValidationError{}

// Validate checks the field values on CategoryListReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CategoryListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// CategoryListReqValidationError is the validation error returned by
// CategoryListReq.Validate if the designated constraints aren't met.
type CategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListReqValidationError) ErrorName() string { return "CategoryListReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListReqValidationError{}

// Validate checks the field values on CategoryListRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CategoryListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCategorys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListResValidationError{
					field:  fmt.Sprintf("Categorys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CategoryListResValidationError is the validation error returned by
// CategoryListRes.Validate if the designated constraints aren't met.
type CategoryListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListResValidationError) ErrorName() string { return "CategoryListResValidationError" }

// Error satisfies the builtin error interface
func (e CategoryListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListResValidationError{}
